{
	"id": "564dc62e38b001b83fbc4fdc84436638",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"../lib/structures.sol\";        // шаблон структур\r\n\r\n// COMMENT: Контракт хранит в себе функции проверка.\r\ncontract validateFuncs is structures {\r\n    function validateOwner() public returns (bool) {\r\n        if(structUsers_[msg.sender].role == Role.SYSTEM_OWNER) {\r\n            return (true);\r\n        }\r\n    }\r\n}"
			},
			"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract structures {\r\n    // COMMENT: Роли для структуры пользователей.\r\n    enum Role {\r\n        SYSTEM_OWNER,\r\n        SYSTEM_PUBLIC,\r\n        SYSTEM_PRIVATE,\r\n        INVESTOR,\r\n        USER\r\n    }\r\n\r\n    // COMMENT_SCTRUCT: Структура пользователей.\r\n    struct structUser {\r\n        Role role;               // роль  \r\n        string login;            // логин\r\n        bytes32 password;        // пароль\r\n        uint256 balance_overall; // общий баланс\r\n        uint256 balance_seed;    // баланс SEED токенов\r\n        uint256 balance_private; // баланс PRIVATE токенов\r\n        uint256 balance_public;  // баланс PUBLIC токенов\r\n    }\r\n    mapping (address => structUser) structUsers_; // обращение к структуре по АДРЕСАМ\r\n\r\n    // COMMENT_SCTRUC: Структура фазы.\r\n    struct structPhase {\r\n        bool statusPhase; // статус фазы\r\n        bool reviewed;    // была ли активирована фаза\r\n    }\r\n    mapping (address => structPhase) structPhases_; // обращение к структуре по АДРЕСАМ\r\n\r\n    // COMMENT_STRUCT: Структура заявок пользователей.\r\n    struct structApplication {\r\n        string name;                    // имя\r\n        string contactForCommunication; // контакты для связи\r\n        address userAdr;                // адрес пользователя\r\n        bool status;                    // статус заявки\r\n        bool reviewed;                  // была ли просмотрена заявка\r\n        bool exist;                     // заявка существует\r\n    }\r\n    mapping (address => structApplication) strucApplications_; // обращение к структуре по АДРЕСАМ\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol": {
				"validateFuncs": {
					"abi": [
						{
							"inputs": [],
							"name": "validateOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":235:442  contract validateFuncs is structures {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":235:442  contract validateFuncs is structures {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x403cec1a\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":279:439  function validateOwner() public returns (bool) {\r... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":320:324  bool */\n      0x00\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":373:390  Role.SYSTEM_OWNER */\n      dup1\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":340:390  structUsers_[msg.sender].role == Role.SYSTEM_OWNER */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_9\n      jumpi\n      tag_10\n      tag_11\n      jump\t// in\n    tag_10:\n    tag_9:\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":340:352  structUsers_ */\n      0x00\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":340:364  structUsers_[msg.sender] */\n      dup1\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":353:363  msg.sender */\n      caller\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":340:364  structUsers_[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":340:369  structUsers_[msg.sender].role */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":340:390  structUsers_[msg.sender].role == Role.SYSTEM_OWNER */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_12\n      jumpi\n      tag_13\n      tag_11\n      jump\t// in\n    tag_13:\n    tag_12:\n      eq\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":337:432  if(structUsers_[msg.sender].role == Role.SYSTEM_OWNER) {\r... */\n      iszero\n      tag_14\n      jumpi\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":415:419  true */\n      0x01\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":407:420  return (true) */\n      swap1\n      pop\n      jump(tag_8)\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":337:432  if(structUsers_[msg.sender].role == Role.SYSTEM_OWNER) {\r... */\n    tag_14:\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":279:439  function validateOwner() public returns (bool) {\r... */\n    tag_8:\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:116   */\n    tag_16:\n        /* \"#utility.yul\":88:109   */\n      tag_18\n        /* \"#utility.yul\":103:108   */\n      dup2\n        /* \"#utility.yul\":88:109   */\n      tag_19\n      jump\t// in\n    tag_18:\n        /* \"#utility.yul\":83:86   */\n      dup3\n        /* \"#utility.yul\":76:110   */\n      mstore\n        /* \"#utility.yul\":7:116   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":122:332   */\n    tag_7:\n        /* \"#utility.yul\":209:213   */\n      0x00\n        /* \"#utility.yul\":247:249   */\n      0x20\n        /* \"#utility.yul\":236:245   */\n      dup3\n        /* \"#utility.yul\":232:250   */\n      add\n        /* \"#utility.yul\":224:250   */\n      swap1\n      pop\n        /* \"#utility.yul\":260:325   */\n      tag_21\n        /* \"#utility.yul\":322:323   */\n      0x00\n        /* \"#utility.yul\":311:320   */\n      dup4\n        /* \"#utility.yul\":307:324   */\n      add\n        /* \"#utility.yul\":298:304   */\n      dup5\n        /* \"#utility.yul\":260:325   */\n      tag_16\n      jump\t// in\n    tag_21:\n        /* \"#utility.yul\":122:332   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":338:428   */\n    tag_19:\n        /* \"#utility.yul\":372:379   */\n      0x00\n        /* \"#utility.yul\":415:420   */\n      dup2\n        /* \"#utility.yul\":408:421   */\n      iszero\n        /* \"#utility.yul\":401:422   */\n      iszero\n        /* \"#utility.yul\":390:422   */\n      swap1\n      pop\n        /* \"#utility.yul\":338:428   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":434:614   */\n    tag_11:\n        /* \"#utility.yul\":482:559   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":479:480   */\n      0x00\n        /* \"#utility.yul\":472:560   */\n      mstore\n        /* \"#utility.yul\":579:583   */\n      0x21\n        /* \"#utility.yul\":576:577   */\n      0x04\n        /* \"#utility.yul\":569:584   */\n      mstore\n        /* \"#utility.yul\":603:607   */\n      0x24\n        /* \"#utility.yul\":600:601   */\n      0x00\n        /* \"#utility.yul\":593:608   */\n      revert\n\n    auxdata: 0xa264697066735822122058d1cd30f67d08348d796373e18e678311657f9ee5c134ba41dd2abc96eba9c364736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610172806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063403cec1a14610030575b600080fd5b61003861004e565b60405161004591906100e6565b60405180910390f35b60008060048111156100635761006261010d565b5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660048111156100c4576100c361010d565b5b14156100d357600190506100d4565b5b90565b6100e081610101565b82525050565b60006020820190506100fb60008301846100d7565b92915050565b60008115159050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea264697066735822122058d1cd30f67d08348d796373e18e678311657f9ee5c134ba41dd2abc96eba9c364736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x172 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x403CEC1A EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x63 JUMPI PUSH2 0x62 PUSH2 0x10D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC4 JUMPI PUSH2 0xC3 PUSH2 0x10D JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0xD3 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xD4 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 DUP2 PUSH2 0x101 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xD1 0xCD ADDRESS 0xF6 PUSH30 0x8348D796373E18E678311657F9EE5C134BA41DD2ABC96EBA9C364736F6C PUSH4 0x43000807 STOP CALLER ",
							"sourceMap": "235:207:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@validateOwner_23": {
									"entryPoint": 78,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 215,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 230,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 257,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x21": {
									"entryPoint": 269,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:617:2",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:50:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "83:3:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "103:5:2"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "88:14:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "88:21:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "76:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "76:34:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "76:34:2"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "54:5:2",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "61:3:2",
														"type": ""
													}
												],
												"src": "7:109:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "214:118:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "224:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "236:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "247:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "224:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "298:6:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "311:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "322:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "307:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "307:17:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "260:37:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "260:65:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "260:65:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "186:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "198:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "209:4:2",
														"type": ""
													}
												],
												"src": "122:210:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "380:48:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "390:32:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "415:5:2"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "408:6:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "408:13:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "401:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "401:21:2"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "390:7:2"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "362:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "372:7:2",
														"type": ""
													}
												],
												"src": "338:90:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "462:152:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "479:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "482:77:2",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "472:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "472:88:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "472:88:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "576:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "579:4:2",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "569:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "569:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "600:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "603:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "593:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "593:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "593:15:2"
														}
													]
												},
												"name": "panic_error_0x21",
												"nodeType": "YulFunctionDefinition",
												"src": "434:180:2"
											}
										]
									},
									"contents": "{\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063403cec1a14610030575b600080fd5b61003861004e565b60405161004591906100e6565b60405180910390f35b60008060048111156100635761006261010d565b5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660048111156100c4576100c361010d565b5b14156100d357600190506100d4565b5b90565b6100e081610101565b82525050565b60006020820190506100fb60008301846100d7565b92915050565b60008115159050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea264697066735822122058d1cd30f67d08348d796373e18e678311657f9ee5c134ba41dd2abc96eba9c364736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x403CEC1A EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45 SWAP2 SWAP1 PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x63 JUMPI PUSH2 0x62 PUSH2 0x10D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC4 JUMPI PUSH2 0xC3 PUSH2 0x10D JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0xD3 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xD4 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 DUP2 PUSH2 0x101 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0xD1 0xCD ADDRESS 0xF6 PUSH30 0x8348D796373E18E678311657F9EE5C134BA41DD2ABC96EBA9C364736F6C PUSH4 0x43000807 STOP CALLER ",
							"sourceMap": "235:207:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;279:160;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;320:4;373:17;340:50;;;;;;;;:::i;:::-;;:12;:24;353:10;340:24;;;;;;;;;;;;;;;:29;;;;;;;;;;;;:50;;;;;;;;:::i;:::-;;;337:95;;;415:4;407:13;;;;337:95;279:160;;:::o;7:109:2:-;88:21;103:5;88:21;:::i;:::-;83:3;76:34;7:109;;:::o;122:210::-;209:4;247:2;236:9;232:18;224:26;;260:65;322:1;311:9;307:17;298:6;260:65;:::i;:::-;122:210;;;;:::o;338:90::-;372:7;415:5;408:13;401:21;390:32;;338:90;;;:::o;434:180::-;482:77;479:1;472:88;579:4;576:1;569:15;603:4;600:1;593:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "74000",
								"executionCost": "123",
								"totalCost": "74123"
							},
							"external": {
								"validateOwner()": "2641"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 235,
									"end": 442,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 235,
									"end": 442,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122058d1cd30f67d08348d796373e18e678311657f9ee5c134ba41dd2abc96eba9c364736f6c63430008070033",
									".code": [
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "403CEC1A"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 235,
											"end": 442,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 235,
											"end": 442,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 320,
											"end": 324,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 373,
											"end": 390,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 340,
											"end": 352,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 340,
											"end": 364,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 353,
											"end": 363,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 340,
											"end": 364,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 340,
											"end": 364,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 340,
											"end": 364,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 340,
											"end": 364,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 340,
											"end": 364,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 340,
											"end": 364,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 340,
											"end": 369,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 340,
											"end": 369,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 340,
											"end": 369,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 340,
											"end": 369,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 340,
											"end": 369,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 340,
											"end": 390,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 340,
											"end": 390,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 337,
											"end": 432,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 337,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 337,
											"end": 432,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 415,
											"end": 419,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 407,
											"end": 420,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 407,
											"end": 420,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 407,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 407,
											"end": 420,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 337,
											"end": 432,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 337,
											"end": 432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 279,
											"end": 439,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 116,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 7,
											"end": 116,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 88,
											"end": 109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 103,
											"end": 108,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 88,
											"end": 109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 83,
											"end": 86,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 76,
											"end": 110,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7,
											"end": 116,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 116,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 116,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 122,
											"end": 332,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 122,
											"end": 332,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 209,
											"end": 213,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 249,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 236,
											"end": 245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 232,
											"end": 250,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 224,
											"end": 250,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 224,
											"end": 250,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 260,
											"end": 325,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 322,
											"end": 323,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 320,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 307,
											"end": 324,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 298,
											"end": 304,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 260,
											"end": 325,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 122,
											"end": 332,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 122,
											"end": 332,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 122,
											"end": 332,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 122,
											"end": 332,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 122,
											"end": 332,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 338,
											"end": 428,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 428,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 372,
											"end": 379,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 408,
											"end": 421,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 401,
											"end": 422,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 390,
											"end": 422,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 390,
											"end": 422,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 338,
											"end": 428,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 338,
											"end": 428,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 338,
											"end": 428,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 338,
											"end": 428,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 434,
											"end": 614,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 434,
											"end": 614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 482,
											"end": 559,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 479,
											"end": 480,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 472,
											"end": 560,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 579,
											"end": 583,
											"name": "PUSH",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 576,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 569,
											"end": 584,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 603,
											"end": 607,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 600,
											"end": 601,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 593,
											"end": 608,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"validateOwner()": "403cec1a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"validateOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":\"validateFuncs\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol\":{\"keccak256\":\"0x8e7e145f21d0c54cd6470de2e0bfc8828f1d7852192c18b6aef74313075eb082\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a271c24c13a69ba11b8c9bb5edfb1a477177f34e9215fdb304884c2e7451b9ac\",\"dweb:/ipfs/QmRuFyzagVwV6o7Te93vJi2BhZqFWcxn9yFG3TNJG1N6W6\"]},\"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol\":{\"keccak256\":\"0x3c4d55fff6547a670227273cabf6e5cd6279729590c2415e26148beed5975392\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://31dfe220e5e8f93ca63e6021e3fdf2115f3672410395d5ba5cceb197c48e921f\",\"dweb:/ipfs/QmcMwAuz3HM2QT4HWoHUxny2HqbtibVdu3gDwkeEs9Xyn7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 53,
								"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
								"label": "structUsers_",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_struct(structUser)48_storage)"
							},
							{
								"astId": 63,
								"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
								"label": "structPhases_",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_struct(structPhase)58_storage)"
							},
							{
								"astId": 81,
								"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
								"label": "strucApplications_",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(structApplication)76_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_enum(Role)32": {
								"encoding": "inplace",
								"label": "enum structures.Role",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(structApplication)76_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct structures.structApplication)",
								"numberOfBytes": "32",
								"value": "t_struct(structApplication)76_storage"
							},
							"t_mapping(t_address,t_struct(structPhase)58_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct structures.structPhase)",
								"numberOfBytes": "32",
								"value": "t_struct(structPhase)58_storage"
							},
							"t_mapping(t_address,t_struct(structUser)48_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct structures.structUser)",
								"numberOfBytes": "32",
								"value": "t_struct(structUser)48_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(structApplication)76_storage": {
								"encoding": "inplace",
								"label": "struct structures.structApplication",
								"members": [
									{
										"astId": 65,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "name",
										"offset": 0,
										"slot": "0",
										"type": "t_string_storage"
									},
									{
										"astId": 67,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "contactForCommunication",
										"offset": 0,
										"slot": "1",
										"type": "t_string_storage"
									},
									{
										"astId": 69,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "userAdr",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 71,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "status",
										"offset": 20,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 73,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "reviewed",
										"offset": 21,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 75,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "exist",
										"offset": 22,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(structPhase)58_storage": {
								"encoding": "inplace",
								"label": "struct structures.structPhase",
								"members": [
									{
										"astId": 55,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "statusPhase",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 57,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "reviewed",
										"offset": 1,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(structUser)48_storage": {
								"encoding": "inplace",
								"label": "struct structures.structUser",
								"members": [
									{
										"astId": 35,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "role",
										"offset": 0,
										"slot": "0",
										"type": "t_enum(Role)32"
									},
									{
										"astId": 37,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "login",
										"offset": 0,
										"slot": "1",
										"type": "t_string_storage"
									},
									{
										"astId": 39,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "password",
										"offset": 0,
										"slot": "2",
										"type": "t_bytes32"
									},
									{
										"astId": 41,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "balance_overall",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 43,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "balance_seed",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 45,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "balance_private",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 47,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:validateFuncs",
										"label": "balance_public",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol": {
				"structures": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol\":72:1988  contract structures {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol\":72:1988  contract structures {\r... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209787948b605bf4bab4e1819b7ff0f307cd07633a328191c927cc3f36352749cd64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212209787948b605bf4bab4e1819b7ff0f307cd07633a328191c927cc3f36352749cd64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 DUP8 SWAP5 DUP12 PUSH1 0x5B DELEGATECALL 0xBA 0xB4 0xE1 DUP2 SWAP12 PUSH32 0xF0F307CD07633A328191C927CC3F36352749CD64736F6C634300080700330000 ",
							"sourceMap": "72:1916:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea26469706673582212209787948b605bf4bab4e1819b7ff0f307cd07633a328191c927cc3f36352749cd64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP8 DUP8 SWAP5 DUP12 PUSH1 0x5B DELEGATECALL 0xBA 0xB4 0xE1 DUP2 SWAP12 PUSH32 0xF0F307CD07633A328191C927CC3F36352749CD64736F6C634300080700330000 ",
							"sourceMap": "72:1916:1:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 72,
									"end": 1988,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209787948b605bf4bab4e1819b7ff0f307cd07633a328191c927cc3f36352749cd64736f6c63430008070033",
									".code": [
										{
											"begin": 72,
											"end": 1988,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 72,
											"end": 1988,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 72,
											"end": 1988,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 72,
											"end": 1988,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 72,
											"end": 1988,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 72,
											"end": 1988,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol\":\"structures\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol\":{\"keccak256\":\"0x3c4d55fff6547a670227273cabf6e5cd6279729590c2415e26148beed5975392\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://31dfe220e5e8f93ca63e6021e3fdf2115f3672410395d5ba5cceb197c48e921f\",\"dweb:/ipfs/QmcMwAuz3HM2QT4HWoHUxny2HqbtibVdu3gDwkeEs9Xyn7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 53,
								"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
								"label": "structUsers_",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_struct(structUser)48_storage)"
							},
							{
								"astId": 63,
								"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
								"label": "structPhases_",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_struct(structPhase)58_storage)"
							},
							{
								"astId": 81,
								"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
								"label": "strucApplications_",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(structApplication)76_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_enum(Role)32": {
								"encoding": "inplace",
								"label": "enum structures.Role",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(structApplication)76_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct structures.structApplication)",
								"numberOfBytes": "32",
								"value": "t_struct(structApplication)76_storage"
							},
							"t_mapping(t_address,t_struct(structPhase)58_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct structures.structPhase)",
								"numberOfBytes": "32",
								"value": "t_struct(structPhase)58_storage"
							},
							"t_mapping(t_address,t_struct(structUser)48_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct structures.structUser)",
								"numberOfBytes": "32",
								"value": "t_struct(structUser)48_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(structApplication)76_storage": {
								"encoding": "inplace",
								"label": "struct structures.structApplication",
								"members": [
									{
										"astId": 65,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "name",
										"offset": 0,
										"slot": "0",
										"type": "t_string_storage"
									},
									{
										"astId": 67,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "contactForCommunication",
										"offset": 0,
										"slot": "1",
										"type": "t_string_storage"
									},
									{
										"astId": 69,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "userAdr",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 71,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "status",
										"offset": 20,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 73,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "reviewed",
										"offset": 21,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 75,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "exist",
										"offset": 22,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(structPhase)58_storage": {
								"encoding": "inplace",
								"label": "struct structures.structPhase",
								"members": [
									{
										"astId": 55,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "statusPhase",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 57,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "reviewed",
										"offset": 1,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(structUser)48_storage": {
								"encoding": "inplace",
								"label": "struct structures.structUser",
								"members": [
									{
										"astId": 35,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "role",
										"offset": 0,
										"slot": "0",
										"type": "t_enum(Role)32"
									},
									{
										"astId": 37,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "login",
										"offset": 0,
										"slot": "1",
										"type": "t_string_storage"
									},
									{
										"astId": 39,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "password",
										"offset": 0,
										"slot": "2",
										"type": "t_bytes32"
									},
									{
										"astId": 41,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "balance_overall",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 43,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "balance_seed",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 45,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "balance_private",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 47,
										"contract": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol:structures",
										"label": "balance_public",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n --> Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:8:46:\n  |\n8 |     function validateOwner() public returns (bool) {\n  |                                              ^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 324,
					"file": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol",
					"start": 320
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to view\n --> Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol:8:5:\n  |\n8 |     function validateOwner() public returns (bool) {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to view",
				"severity": "warning",
				"sourceLocation": {
					"end": 439,
					"file": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol",
					"start": 279
				},
				"type": "Warning"
			}
		],
		"sources": {
			"Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol": {
				"ast": {
					"absolutePath": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/helpers/validateFuncs.sol",
					"exportedSymbols": {
						"structures": [
							82
						],
						"validateFuncs": [
							24
						]
					},
					"id": 25,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:0"
						},
						{
							"absolutePath": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol",
							"file": "../lib/structures.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 25,
							"sourceUnit": 83,
							"src": "72:31:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3,
										"name": "structures",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 82,
										"src": "261:10:0"
									},
									"id": 4,
									"nodeType": "InheritanceSpecifier",
									"src": "261:10:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 24,
							"linearizedBaseContracts": [
								24,
								82
							],
							"name": "validateFuncs",
							"nameLocation": "244:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "326:113:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_Role_$32",
														"typeString": "enum structures.Role"
													},
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 9,
																"name": "structUsers_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 53,
																"src": "340:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structUser_$48_storage_$",
																	"typeString": "mapping(address => struct structures.structUser storage ref)"
																}
															},
															"id": 12,
															"indexExpression": {
																"expression": {
																	"id": 10,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "353:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "353:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "340:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_structUser_$48_storage",
																"typeString": "struct structures.structUser storage ref"
															}
														},
														"id": 13,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "role",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 35,
														"src": "340:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Role_$32",
															"typeString": "enum structures.Role"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 14,
															"name": "Role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "373:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_Role_$32_$",
																"typeString": "type(enum structures.Role)"
															}
														},
														"id": 15,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "SYSTEM_OWNER",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 27,
														"src": "373:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_Role_$32",
															"typeString": "enum structures.Role"
														}
													},
													"src": "340:50:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 21,
												"nodeType": "IfStatement",
												"src": "337:95:0",
												"trueBody": {
													"id": 20,
													"nodeType": "Block",
													"src": "392:40:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 17,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "415:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	}
																],
																"id": 18,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "414:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"functionReturnParameters": 8,
															"id": 19,
															"nodeType": "Return",
															"src": "407:13:0"
														}
													]
												}
											}
										]
									},
									"functionSelector": "403cec1a",
									"id": 23,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "validateOwner",
									"nameLocation": "288:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "301:2:0"
									},
									"returnParameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "320:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 6,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "320:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:6:0"
									},
									"scope": 24,
									"src": "279:160:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 25,
							"src": "235:207:0",
							"usedErrors": []
						}
					],
					"src": "37:405:0"
				},
				"id": 0
			},
			"Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol": {
				"ast": {
					"absolutePath": "Documents/GitHub/contract-token-cryptoMonster/backend/shared/lib/structures.sol",
					"exportedSymbols": {
						"structures": [
							82
						]
					},
					"id": 83,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 26,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 82,
							"linearizedBaseContracts": [
								82
							],
							"name": "structures",
							"nameLocation": "81:10:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "structures.Role",
									"id": 32,
									"members": [
										{
											"id": 27,
											"name": "SYSTEM_OWNER",
											"nameLocation": "200:12:1",
											"nodeType": "EnumValue",
											"src": "200:12:1"
										},
										{
											"id": 28,
											"name": "SYSTEM_PUBLIC",
											"nameLocation": "223:13:1",
											"nodeType": "EnumValue",
											"src": "223:13:1"
										},
										{
											"id": 29,
											"name": "SYSTEM_PRIVATE",
											"nameLocation": "247:14:1",
											"nodeType": "EnumValue",
											"src": "247:14:1"
										},
										{
											"id": 30,
											"name": "INVESTOR",
											"nameLocation": "272:8:1",
											"nodeType": "EnumValue",
											"src": "272:8:1"
										},
										{
											"id": 31,
											"name": "USER",
											"nameLocation": "291:4:1",
											"nodeType": "EnumValue",
											"src": "291:4:1"
										}
									],
									"name": "Role",
									"nameLocation": "184:4:1",
									"nodeType": "EnumDefinition",
									"src": "179:123:1"
								},
								{
									"canonicalName": "structures.structUser",
									"id": 48,
									"members": [
										{
											"constant": false,
											"id": 35,
											"mutability": "mutable",
											"name": "role",
											"nameLocation": "416:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "411:9:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_Role_$32",
												"typeString": "enum structures.Role"
											},
											"typeName": {
												"id": 34,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 33,
													"name": "Role",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 32,
													"src": "411:4:1"
												},
												"referencedDeclaration": 32,
												"src": "411:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Role_$32",
													"typeString": "enum structures.Role"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 37,
											"mutability": "mutable",
											"name": "login",
											"nameLocation": "466:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "459:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 36,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "459:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 39,
											"mutability": "mutable",
											"name": "password",
											"nameLocation": "515:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "507:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 38,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "507:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 41,
											"mutability": "mutable",
											"name": "balance_overall",
											"nameLocation": "565:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "557:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 40,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "557:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 43,
											"mutability": "mutable",
											"name": "balance_seed",
											"nameLocation": "626:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "618:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 42,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "618:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 45,
											"mutability": "mutable",
											"name": "balance_private",
											"nameLocation": "696:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "688:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 44,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "688:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 47,
											"mutability": "mutable",
											"name": "balance_public",
											"nameLocation": "769:14:1",
											"nodeType": "VariableDeclaration",
											"scope": 48,
											"src": "761:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 46,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "761:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "structUser",
									"nameLocation": "389:10:1",
									"nodeType": "StructDefinition",
									"scope": 82,
									"src": "382:448:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 53,
									"mutability": "mutable",
									"name": "structUsers_",
									"nameLocation": "868:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 82,
									"src": "836:44:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structUser_$48_storage_$",
										"typeString": "mapping(address => struct structures.structUser)"
									},
									"typeName": {
										"id": 52,
										"keyType": {
											"id": 49,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "845:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "836:31:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structUser_$48_storage_$",
											"typeString": "mapping(address => struct structures.structUser)"
										},
										"valueType": {
											"id": 51,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 50,
												"name": "structUser",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 48,
												"src": "856:10:1"
											},
											"referencedDeclaration": 48,
											"src": "856:10:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_structUser_$48_storage_ptr",
												"typeString": "struct structures.structUser"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "structures.structPhase",
									"id": 58,
									"members": [
										{
											"constant": false,
											"id": 55,
											"mutability": "mutable",
											"name": "statusPhase",
											"nameLocation": "1041:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 58,
											"src": "1036:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 54,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1036:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 57,
											"mutability": "mutable",
											"name": "reviewed",
											"nameLocation": "1093:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 58,
											"src": "1088:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 56,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1088:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "structPhase",
									"nameLocation": "1013:11:1",
									"nodeType": "StructDefinition",
									"scope": 82,
									"src": "1006:157:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 63,
									"mutability": "mutable",
									"name": "structPhases_",
									"nameLocation": "1202:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 82,
									"src": "1169:46:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structPhase_$58_storage_$",
										"typeString": "mapping(address => struct structures.structPhase)"
									},
									"typeName": {
										"id": 62,
										"keyType": {
											"id": 59,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1178:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1169:32:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structPhase_$58_storage_$",
											"typeString": "mapping(address => struct structures.structPhase)"
										},
										"valueType": {
											"id": 61,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 60,
												"name": "structPhase",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1189:11:1"
											},
											"referencedDeclaration": 58,
											"src": "1189:11:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_structPhase_$58_storage_ptr",
												"typeString": "struct structures.structPhase"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "structures.structApplication",
									"id": 76,
									"members": [
										{
											"constant": false,
											"id": 65,
											"mutability": "mutable",
											"name": "name",
											"nameLocation": "1415:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 76,
											"src": "1408:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 64,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1408:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 67,
											"mutability": "mutable",
											"name": "contactForCommunication",
											"nameLocation": "1466:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 76,
											"src": "1459:30:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 66,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1459:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 69,
											"mutability": "mutable",
											"name": "userAdr",
											"nameLocation": "1546:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 76,
											"src": "1538:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 68,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1538:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 71,
											"mutability": "mutable",
											"name": "status",
											"nameLocation": "1623:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 76,
											"src": "1618:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 70,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1618:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 73,
											"mutability": "mutable",
											"name": "reviewed",
											"nameLocation": "1693:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 76,
											"src": "1688:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 72,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1688:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 75,
											"mutability": "mutable",
											"name": "exist",
											"nameLocation": "1787:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 76,
											"src": "1782:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 74,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1782:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "structApplication",
									"nameLocation": "1379:17:1",
									"nodeType": "StructDefinition",
									"scope": 82,
									"src": "1372:485:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 81,
									"mutability": "mutable",
									"name": "strucApplications_",
									"nameLocation": "1902:18:1",
									"nodeType": "VariableDeclaration",
									"scope": 82,
									"src": "1863:57:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structApplication_$76_storage_$",
										"typeString": "mapping(address => struct structures.structApplication)"
									},
									"typeName": {
										"id": 80,
										"keyType": {
											"id": 77,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1872:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1863:38:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_structApplication_$76_storage_$",
											"typeString": "mapping(address => struct structures.structApplication)"
										},
										"valueType": {
											"id": 79,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 78,
												"name": "structApplication",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 76,
												"src": "1883:17:1"
											},
											"referencedDeclaration": 76,
											"src": "1883:17:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_structApplication_$76_storage_ptr",
												"typeString": "struct structures.structApplication"
											}
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 83,
							"src": "72:1916:1",
							"usedErrors": []
						}
					],
					"src": "37:1951:1"
				},
				"id": 1
			}
		}
	}
}